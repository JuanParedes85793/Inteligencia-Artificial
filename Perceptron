{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNeHVtTRSGVNRcubJ2xjN4j",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JuanParedes85793/Inteligencia-Artificial/blob/main/Perceptron\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Modelo de perceptron"
      ],
      "metadata": {
        "id": "xTozsb1ZA6bM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizamo el modelo de percptron para resolver el problema de la operacion logica ADN"
      ],
      "metadata": {
        "id": "iucJrhn4BKnj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Clase de PERCEPRON"
      ],
      "metadata": {
        "id": "ePoHBuUaBblM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Perceptron:\n",
        "    def _init_(self, pesos, sesgo, tasa_de_aprendizaje):\n",
        "      \"\"\"\n",
        "      Parametros:\n",
        "        pesos: Es una lista\n",
        "        sesgo: Es un flotante\n",
        "        tasa_de_aprendizaje: Es un flotante\n",
        "      \"\"\"\n",
        "      \"\"\"\n",
        "      En esta parte se configura la neurona antes de empezar a aprender.\n",
        "      \"\"\"\n",
        "      self.pesos = pesos\n",
        "      self.sesgo = sesgo\n",
        "      self.tasa_de_aprendizaje = tasa_de_aprendizaje\n",
        "    def funcion_de_activacion(self, z):\n",
        "      \"\"\"\n",
        "      Parametros:\n",
        "        z resultado del producto de x con los pesos + el sesgo\n",
        "      \"\"\"\n",
        "      if z >= 0:\n",
        "        return 1\n",
        "      else:\n",
        "        return 0\n",
        "### Es una función escalón, muy usada en perceptrones básicos, y sirve para clasificar entre dos categorías.\n",
        "    def entrenamiento(self, X, y, epocas):\n",
        "      \"\"\"\n",
        "      Parametros:\n",
        "      epocas: Es un entero\n",
        "      \"\"\"\n",
        "### en este método la neurona aprende de sus errores, ajustando sus parámetros poco a poco hasta mejorar sus predicciones.\n",
        "      for epoca in range(epocas): #Cuantas veces recorrere las espocas\n",
        "        for dato in X:\n",
        "          # Definimos los datos\n",
        "          x1 = dato[0] #las X en las posiciones de la matriz\n",
        "          x2 = dato[1]\n",
        "          indice = X.index(dato)\n",
        "          y_real = Y[indice]\n",
        "          w1 = self.pesos[0]\n",
        "          w2 = self.pesos[1]\n",
        "          # Hacemos la prediccion del modelo\n",
        "          z = x1 * w1 + x2 * w2 + self.sesgo\n",
        "          y_pred = self.funcion_de_activacion(z)\n",
        "          # Actualizamos los pesos\n",
        "          self.pesos[0] = w1 + self.tasa_de_aprendizaje*(y_real-y_pred)*x1\n",
        "          self.pesos[1] = w2 + self.tasa_de_aprendizaje*(y_real-y_pred)*x2\n",
        "          self.sesgo = self.sesgo + self.tasa_de_aprendizaje*(y_real-y_pred)\n",
        "          print(f\"Dato {dato}, Pesos: {self.pesos} y sesgo es {self.sesgo}\")\n",
        "        print(f\"Epoca {epoca}, Pesos: {self.pesos} y sesgo es {self.sesgo}\")\n",
        "### Aquí la neurona ya no aprende, solo usa lo aprendido para hacer predicciones.\n",
        "      def prediccion(self, X, Y):\n",
        "        \"\"\"\n",
        "        \"\"\"\n",
        "        # Definimos los datos\n",
        "        for dato in X:\n",
        "          # Definimos los datos\n",
        "          x1 = dato[0] #las X en las posiciones de la matriz\n",
        "          x2 = dato[1]\n",
        "          indice = X.index(dato)\n",
        "          y_real = Y[indice]\n",
        "          w1 = self.pesos[0]\n",
        "          w2 = self.pesos[1]\n",
        "          # Hacemos la prediccion del modelo\n",
        "          z = x1 * w1 + x2 * w2 + self.sesgo\n",
        "          y_pred = self.funcion_de_activacion(z)\n",
        "          print(f\"Dato {dato}, prediccion {y_pred}, valor real {y_real}\")"
      ],
      "metadata": {
        "id": "lTQPeCkcgt07"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = [[1, 1], [1, 0], [0, 1], [0, 0]]\n",
        "Y = [1, 0, 0, 0]\n",
        "sesgo = 2\n",
        "pesos = [5, 3]\n",
        "tasa_de_aprendizaje = 0.1\n",
        "p = Perceptron(pesos, sesgo, tasa_de_aprendizaje)\n",
        "\"\"\"\n",
        " Esta es la matriz de entradas del perceptrón.\n",
        "Cada par de números representa un conjunto de datos (x₁, x₂) que la neurona va a analizar.\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "QZupYrRpM_35"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "p = Perceptron(pesos, sesgo, tasa_de_aprendizaje)"
      ],
      "metadata": {
        "id": "p-GDPNllPwEb"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Entrenamiento"
      ],
      "metadata": {
        "id": "51y2AnRnRTAy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "epocas = 10\n",
        "p.entrenamiento(X, Y, epocas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iB_BkRdYRXep",
        "outputId": "99e209cd-b2c9-4352-92df-69adbfe2d22e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dato [1, 1], pesos: [5.0, 3.0] y sesgo: 2.0\n",
            "Dato [1, 0], pesos: [4.9, 3.0] y sesgo: 1.9\n",
            "Dato [0, 1], pesos: [4.9, 2.9] y sesgo: 1.7999999999999998\n",
            "Dato [0, 0], pesos: [4.9, 2.9] y sesgo: 1.6999999999999997\n",
            "Epoca 0, pesos: [4.9, 2.9] y sesgo: 1.6999999999999997\n",
            "Dato [1, 1], pesos: [4.9, 2.9] y sesgo: 1.6999999999999997\n",
            "Dato [1, 0], pesos: [4.800000000000001, 2.9] y sesgo: 1.5999999999999996\n",
            "Dato [0, 1], pesos: [4.800000000000001, 2.8] y sesgo: 1.4999999999999996\n",
            "Dato [0, 0], pesos: [4.800000000000001, 2.8] y sesgo: 1.3999999999999995\n",
            "Epoca 1, pesos: [4.800000000000001, 2.8] y sesgo: 1.3999999999999995\n",
            "Dato [1, 1], pesos: [4.800000000000001, 2.8] y sesgo: 1.3999999999999995\n",
            "Dato [1, 0], pesos: [4.700000000000001, 2.8] y sesgo: 1.2999999999999994\n",
            "Dato [0, 1], pesos: [4.700000000000001, 2.6999999999999997] y sesgo: 1.1999999999999993\n",
            "Dato [0, 0], pesos: [4.700000000000001, 2.6999999999999997] y sesgo: 1.0999999999999992\n",
            "Epoca 2, pesos: [4.700000000000001, 2.6999999999999997] y sesgo: 1.0999999999999992\n",
            "Dato [1, 1], pesos: [4.700000000000001, 2.6999999999999997] y sesgo: 1.0999999999999992\n",
            "Dato [1, 0], pesos: [4.600000000000001, 2.6999999999999997] y sesgo: 0.9999999999999992\n",
            "Dato [0, 1], pesos: [4.600000000000001, 2.5999999999999996] y sesgo: 0.8999999999999992\n",
            "Dato [0, 0], pesos: [4.600000000000001, 2.5999999999999996] y sesgo: 0.7999999999999993\n",
            "Epoca 3, pesos: [4.600000000000001, 2.5999999999999996] y sesgo: 0.7999999999999993\n",
            "Dato [1, 1], pesos: [4.600000000000001, 2.5999999999999996] y sesgo: 0.7999999999999993\n",
            "Dato [1, 0], pesos: [4.500000000000002, 2.5999999999999996] y sesgo: 0.6999999999999993\n",
            "Dato [0, 1], pesos: [4.500000000000002, 2.4999999999999996] y sesgo: 0.5999999999999993\n",
            "Dato [0, 0], pesos: [4.500000000000002, 2.4999999999999996] y sesgo: 0.49999999999999933\n",
            "Epoca 4, pesos: [4.500000000000002, 2.4999999999999996] y sesgo: 0.49999999999999933\n",
            "Dato [1, 1], pesos: [4.500000000000002, 2.4999999999999996] y sesgo: 0.49999999999999933\n",
            "Dato [1, 0], pesos: [4.400000000000002, 2.4999999999999996] y sesgo: 0.39999999999999936\n",
            "Dato [0, 1], pesos: [4.400000000000002, 2.3999999999999995] y sesgo: 0.2999999999999994\n",
            "Dato [0, 0], pesos: [4.400000000000002, 2.3999999999999995] y sesgo: 0.19999999999999937\n",
            "Epoca 5, pesos: [4.400000000000002, 2.3999999999999995] y sesgo: 0.19999999999999937\n",
            "Dato [1, 1], pesos: [4.400000000000002, 2.3999999999999995] y sesgo: 0.19999999999999937\n",
            "Dato [1, 0], pesos: [4.3000000000000025, 2.3999999999999995] y sesgo: 0.09999999999999937\n",
            "Dato [0, 1], pesos: [4.3000000000000025, 2.2999999999999994] y sesgo: -6.38378239159465e-16\n",
            "Dato [0, 0], pesos: [4.3000000000000025, 2.2999999999999994] y sesgo: -6.38378239159465e-16\n",
            "Epoca 6, pesos: [4.3000000000000025, 2.2999999999999994] y sesgo: -6.38378239159465e-16\n",
            "Dato [1, 1], pesos: [4.3000000000000025, 2.2999999999999994] y sesgo: -6.38378239159465e-16\n",
            "Dato [1, 0], pesos: [4.200000000000003, 2.2999999999999994] y sesgo: -0.10000000000000064\n",
            "Dato [0, 1], pesos: [4.200000000000003, 2.1999999999999993] y sesgo: -0.20000000000000065\n",
            "Dato [0, 0], pesos: [4.200000000000003, 2.1999999999999993] y sesgo: -0.20000000000000065\n",
            "Epoca 7, pesos: [4.200000000000003, 2.1999999999999993] y sesgo: -0.20000000000000065\n",
            "Dato [1, 1], pesos: [4.200000000000003, 2.1999999999999993] y sesgo: -0.20000000000000065\n",
            "Dato [1, 0], pesos: [4.100000000000003, 2.1999999999999993] y sesgo: -0.30000000000000066\n",
            "Dato [0, 1], pesos: [4.100000000000003, 2.099999999999999] y sesgo: -0.4000000000000007\n",
            "Dato [0, 0], pesos: [4.100000000000003, 2.099999999999999] y sesgo: -0.4000000000000007\n",
            "Epoca 8, pesos: [4.100000000000003, 2.099999999999999] y sesgo: -0.4000000000000007\n",
            "Dato [1, 1], pesos: [4.100000000000003, 2.099999999999999] y sesgo: -0.4000000000000007\n",
            "Dato [1, 0], pesos: [4.0000000000000036, 2.099999999999999] y sesgo: -0.5000000000000007\n",
            "Dato [0, 1], pesos: [4.0000000000000036, 1.9999999999999991] y sesgo: -0.6000000000000006\n",
            "Dato [0, 0], pesos: [4.0000000000000036, 1.9999999999999991] y sesgo: -0.6000000000000006\n",
            "Epoca 9, pesos: [4.0000000000000036, 1.9999999999999991] y sesgo: -0.6000000000000006\n"
          ]
        }
      ]
    }
  ]
}